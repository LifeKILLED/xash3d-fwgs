#version 460 core
#extension GL_GOOGLE_include_directive : require

#include "ray_primary_common.glsl"
#include "color_spaces.glsl"

#define X(index, name, format) layout(set=0,binding=index,format) uniform readonly image2D src_image_##name;
RAY_MOTION_RECONSTRUCT_INPUTS(X)
#undef X

#define X(index, name, format) layout(set=0,binding=index,format) uniform image2D out_image_##name;
RAY_MOTION_RECONSTRUCT_OUTPUTS(X)
#undef X

layout(set = 0, binding = 1) uniform accelerationStructureEXT tlas;
layout(set = 0, binding = 2) uniform UBO { UniformBuffer ubo; };

// TODO: only for one texture, but... too many dependencies if we want to add special descriptor
layout(set = 0, binding = 6) uniform sampler2D textures[MAX_TEXTURES];

layout(location = PAYLOAD_LOCATION_PRIMARY) rayPayloadEXT RayPayloadPrimary payload;

void main() {
	const vec2 uv = (gl_LaunchIDEXT.xy + .5) / gl_LaunchSizeEXT.xy * 2. - 1.;
	const ivec2 pix = ivec2(gl_LaunchIDEXT.xy);

	// FIXME start on a near plane
	const vec3 origin    = (ubo.inv_view * vec4(0, 0, 0, 1)).xyz;
	const vec4 target    = ubo.inv_proj * vec4(uv.x, uv.y, 1, 1);
	//vec3 direction = (ubo.inv_view * vec4(normalize(target.xyz), 0)).xyz;
	const vec3 direction = normalize((ubo.inv_view * vec4(target.xyz, 0)).xyz);

//	payload.hit_t = vec4(0.);
//	payload.base_color_a = vec4(0.);
//	payload.normals_gs = vec4(0.);
//	payload.material_rmxx = vec4(0.);
//	payload.emissive = vec4(0.);
//
//	const uint flags = gl_RayFlagsCullFrontFacingTrianglesEXT;
//	const uint sbt_offset = 0;
//	const uint sbt_stride = 0;
//	const float L = 10000.; // TODO Why 10k?
//	traceRayEXT(tlas, flags, GEOMETRY_BIT_OPAQUE, // | GEOMETRY_BIT_REFRACTIVE,
//		sbt_offset, sbt_stride, SHADER_OFFSET_MISS_REGULAR,
//		origin, 0., direction, L,
//		PAYLOAD_LOCATION_PRIMARY);

	// sample blue noise
	//vec2 blue_noise_uv = vec2(pix % BLUE_NOISE_TEX_RESOLUTION) / vec2(BLUE_NOISE_TEX_RESOLUTION);
	//vec4 blue_noise = texture(textures[BLUE_NOISE_TEX_ID], blue_noise_uv);

	imageStore(out_image_motion_offsets_uvs, ivec2(gl_LaunchIDEXT.xy), vec4(0.));
}
