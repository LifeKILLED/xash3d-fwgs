#version 460 core
#extension GL_GOOGLE_include_directive : require

#include "ray_primary_common.glsl"
#include "color_spaces.glsl"

#define X(index, name, format) layout(set=0,binding=index,format) uniform image2D out_image_##name;
RAY_LAST_FRAME_BUFFERS_OUTPUTS(X)
#undef X

layout(set = 0, binding = 1) uniform accelerationStructureEXT tlas;
layout(set = 0, binding = 2) uniform UBO { UniformBuffer ubo; };

layout(location = PAYLOAD_LOCATION_PRIMARY) rayPayloadEXT RayPayloadPrimary payload;

void main() {
	const ivec2 pix = ivec2(gl_LaunchIDEXT.xy);

	// with this shader we just abuse system of barriers
	// run this only before map loaded frame or after init

	imageStore(out_image_last_position_t, ivec2(gl_LaunchIDEXT.xy), vec4(0.));
	imageStore(out_image_last_refl_position_t, ivec2(gl_LaunchIDEXT.xy), vec4(0.));
	imageStore(out_image_last_normals_gs, ivec2(gl_LaunchIDEXT.xy), vec4(0.));
	imageStore(out_image_last_search_info_ktuv, ivec2(gl_LaunchIDEXT.xy), vec4(0.));
	imageStore(out_image_last_diffuse, ivec2(gl_LaunchIDEXT.xy), vec4(0.));
	imageStore(out_image_last_reflection, ivec2(gl_LaunchIDEXT.xy), vec4(0.));
	imageStore(out_image_last_gi_sh1, ivec2(gl_LaunchIDEXT.xy), vec4(0.));
	imageStore(out_image_last_gi_sh2, ivec2(gl_LaunchIDEXT.xy), vec4(0.));
}
