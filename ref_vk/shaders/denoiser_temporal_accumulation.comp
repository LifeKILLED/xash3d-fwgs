#version 460

#include "noise.glsl"
#include "utils.glsl"
#include "denoiser_tools.glsl"
#include "brdf.h"

#define PARALLAX_FACTOR_POW 2.

#define NORMALS_DIFFERENCE_LOW 0.93
#define NORMALS_DIFFERENCE_HIGH 0.97

#define DIFFUSE_BLEND_LIMIT .98
#define SPECULAR_BLEND_LIMIT .98
#define GI_BLEND_LIMIT .98

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba16f) uniform image2D out_diffuse_accum;
layout(set = 0, binding = 1, rgba16f) uniform image2D out_specular_accum;
layout(set = 0, binding = 2, rgba16f) uniform image2D out_gi_sh1_accum;
layout(set = 0, binding = 3, rgba16f) uniform image2D out_gi_sh2_accum;
layout(set = 0, binding = 4, rgba16f) uniform image2D out_specular_variance;
layout(set = 0, binding = 5, rgba16f) uniform image2D out_diffuse_variance;

layout(set = 0, binding = 6, rgba16f)  uniform readonly image2D src_history_diffuse;
layout(set = 0, binding = 7, rgba16f)  uniform readonly image2D src_history_specular;
layout(set = 0, binding = 8, rgba16f) uniform readonly image2D src_history_gi_sh1;
layout(set = 0, binding = 9, rgba16f) uniform readonly image2D src_history_gi_sh2;

vec4 calculateVariance(vec3 current_radiance, vec3 last_radiance, float frames_blend) {
	vec2 moments = vec2(luminance(current_radiance), 0.);
	moments.g    = moments.r * moments.r;

	vec2 prev_moments = vec2(luminance(last_radiance), 0.);
	prev_moments.g    = prev_moments.r * prev_moments.r;

	moments = mix(prev_moments, moments, frames_blend);
	return vec4(max(0.0f, moments.g - moments.r * moments.r));
}
	
void main() {
	ivec2 res = ivec2(imageSize(out_diffuse_accum));
	ivec2 pix = ivec2(gl_GlobalInvocationID);
	const vec2 uv = (pix.xy + .5) / res.xy * 2. - 1.;

	if (any(greaterThanEqual(pix, res))) {
		return;
	}
	
	const float min_samples = 1.;

	const vec4 diffuse_src = vec4(imageLoad(out_diffuse_accum, pix).rgb, min_samples); 
	const vec4 specular_src = vec4(imageLoad(out_specular_accum, pix).rgb, min_samples); 
	const vec4 gi_sh1_src = imageLoad(out_gi_sh1_accum, pix);
	const vec4 gi_sh2_src_rayLength = imageLoad(out_gi_sh2_accum, pix);
	const vec3 gi_sh2_src = vec3(gi_sh2_src_rayLength.xy, min_samples);

	const vec4 diffuse_history = imageLoad(src_history_diffuse, pix); 
	const vec4 specular_history = imageLoad(src_history_specular, pix); 
	const vec4 gi_sh1_history = imageLoad(src_history_gi_sh1, pix); 
	const vec3 gi_sh2_history = imageLoad(src_history_gi_sh2, pix).xyz; 

	vec4 diffuse_variance = vec4(1.); // default is maximal variance
	vec4 specular_variance = vec4(1.); // default is maximal variance

	const float diffuse_difference = 0.;
	const float specular_difference = 0.;
	const float gi_difference = 0.;

	const float duffuse_samples_count = mix(diffuse_history.w, min_samples, diffuse_difference);
	const float specular_samples_count = mix(specular_history.w,  min_samples, specular_difference);
	const float gi_samples_count = mix(gi_sh2_history.z,  min_samples, gi_difference);

	const float diffuse_frames_blend = clamp(1. - 1. / duffuse_samples_count, .0, DIFFUSE_BLEND_LIMIT);
	const float specular_frames_blend = clamp(1. - 1. / specular_samples_count, .0, SPECULAR_BLEND_LIMIT);
	const float gi_frames_blend = clamp(1. - 1. / gi_samples_count, .0, GI_BLEND_LIMIT);

	if (diffuse_history.w > 0.99) {
		diffuse_variance = calculateVariance(diffuse_src.rgb, diffuse_history.rgb, diffuse_frames_blend);
	}

	if (specular_history.w > 0.99) {
		specular_variance = calculateVariance(specular_src.rgb, specular_history.rgb, specular_frames_blend);
	}

	vec4 diffuse_mixed = mix(diffuse_src, diffuse_history, diffuse_frames_blend);
	vec4 specular_mixed = mix(specular_src, specular_history, specular_frames_blend);
	vec4 gi_sh1_mixed = mix(gi_sh1_src, gi_sh1_history, gi_frames_blend);
	vec3 gi_sh2_mixed = mix(gi_sh2_src, gi_sh2_history, gi_frames_blend);

	//diffuse_mixed = diffuse_src;

	imageStore(out_diffuse_accum, pix, diffuse_mixed);
	imageStore(out_specular_accum, pix, specular_mixed);
	imageStore(out_gi_sh1_accum, pix, gi_sh1_mixed);
	imageStore(out_gi_sh2_accum, pix, vec4(gi_sh2_mixed, gi_sh2_src_rayLength.w));
	imageStore(out_diffuse_variance, pix, diffuse_variance);
	imageStore(out_specular_variance, pix, specular_variance);
}
