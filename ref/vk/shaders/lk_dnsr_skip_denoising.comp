#version 460

#include "noise.glsl"
#include "utils.glsl"
#include "lk_dnsr_spherical_harmonics.glsl"
#include "lk_dnsr_utils.glsl"
#include "color_spaces.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;


layout(set = 0, binding = 0, rgba16f) uniform writeonly image2D out_specular_denoised;
layout(set = 0, binding = 1, rgba16f) uniform writeonly image2D out_diffuse_denoised;
layout(set = 0, binding = 2, rgba16f) uniform writeonly image2D out_gi_sh1_denoised;
layout(set = 0, binding = 3, rgba16f) uniform writeonly image2D out_gi_sh2_denoised;

layout(set = 0, binding = 4, rgba16f) uniform readonly image2D specular_pre_blured;
layout(set = 0, binding = 5, rgba16f) uniform readonly image2D diffuse_pre_blured;
layout(set = 0, binding = 6, rgba16f) uniform readonly image2D gi_sh1_accum;
layout(set = 0, binding = 7, rgba16f) uniform readonly image2D gi_sh2_accum;

//layout(set = 0, binding = 8, rgba8) uniform readonly image2D refl_base_color_a;

void main() {
	ivec2 res = ivec2(imageSize(out_specular_denoised));
	ivec2 pix = ivec2(gl_GlobalInvocationID);

	if (any(greaterThanEqual(pix, res))) {
		return;
	}

//	imageStore(out_specular_denoised, pix, vec4(0.));
//	imageStore(out_diffuse_denoised, pix, vec4(0.));
//	imageStore(out_gi_sh1_denoised, pix, vec4(0.));
//	imageStore(out_gi_sh2_denoised, pix, vec4(0.));


	imageStore(out_specular_denoised, pix, imageLoad(specular_pre_blured, pix));
	imageStore(out_diffuse_denoised, pix, imageLoad(diffuse_pre_blured, pix));
	imageStore(out_gi_sh1_denoised, pix, imageLoad(gi_sh1_accum, pix));
	imageStore(out_gi_sh2_denoised, pix, imageLoad(gi_sh2_accum, pix));
}
